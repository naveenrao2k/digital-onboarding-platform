generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  password           String?
  firstName          String
  lastName           String
  phone              String?
  address            String?
  dateOfBirth        DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  role               UserRole            @default(USER)
  accountStatus      AccountStatus       @default(PENDING)
  accountType        AccountType         @default(INDIVIDUAL)
  account            Account?
  auditLogs          AuditLog[]
  kycDocuments       KYCDocument[]
  kycFormData        KYCFormData?
  notifications      Notification[]
  references         Reference[]
  selfieVerification SelfieVerification?
  verificationStatus VerificationStatus?
  dojahVerifications DojahVerification[]
  adminReviews       AdminReview[]
  reviewedByMe       AdminReview[]       @relation("AdminReviews")
  fraudDetections    FraudDetection[]
  creditScore        CreditScore?
  creditBureauChecks CreditBureauCheck[]
  creditFactors      CreditFactor[]
  creditAccounts     CreditAccount[]
  creditEnquiries    CreditEnquiry[]
  creditAlerts       CreditAlert[]
}

model Account {
  id              String        @id @default(cuid())
  userId          String        @unique
  businessName    String?
  businessType    BusinessType?
  businessAddress String?
  taxNumber       String?
  scumlNumber     String?
  occupation      String?
  sourceOfIncome  String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KYCDocument {
  id          String                 @id @default(cuid())
  userId      String
  type        DocumentType
  fileUrl     String                 // S3 URL for the file
  s3Key       String                 // S3 key for the file
  fileSize    Int
  mimeType    String
  fileName    String
  uploadedAt  DateTime               @default(now())
  verified    Boolean                @default(false)
  verifiedAt  DateTime?
  verifiedBy  String?
  status      VerificationStatusEnum @default(PENDING)
  notes       String?
  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentAnalysis DocumentAnalysis?
}

model SelfieVerification {
  id          String                 @id @default(cuid())
  userId      String                 @unique
  fileUrl     String                 // S3 URL for the file
  s3Key       String                 // S3 key for the file
  fileName    String
  fileSize    Int
  mimeType    String
  capturedAt  DateTime               @default(now())
  verified    Boolean                @default(false)
  verifiedAt  DateTime?
  verifiedBy  String?
  status      VerificationStatusEnum @default(PENDING)
  notes       String?
  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationStatus {
  id            String                 @id @default(cuid())
  userId        String                 @unique
  kycStatus     VerificationStatusEnum @default(PENDING)
  selfieStatus  VerificationStatusEnum @default(PENDING)
  overallStatus VerificationStatusEnum @default(PENDING)
  progress      Int                    @default(0)
  updatedAt     DateTime               @updatedAt
  reviewedBy    String?
  notes         String?
  user          User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reference {
  id           String    @id @default(cuid())
  userId       String
  name         String
  address      String
  phone        String
  email        String?
  relationship String?
  verified     Boolean   @default(false)
  verifiedAt   DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  link      String?
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  details    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  targetId   String?
  targetType String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?
}

model DojahVerification {
  id                String                @id @default(cuid())
  userId            String
  verificationType  DojahVerificationType
  documentId        String?               // References KYCDocument or SelfieVerification
  referenceId       String?               // Dojah's reference ID
  requestData       Json?                 // Original request payload
  responseData      Json?                 // Dojah response
  status            DojahStatus           @default(PENDING)
  confidence        Float?                // Confidence score from Dojah
  matchResult       Json?                 // Face match or document match results
  extractedData     Json?                 // Extracted data from document analysis
  governmentData    Json?                 // Data from government lookup APIs
  errorMessage      String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  adminReviews      AdminReview[]
  
  @@index([userId, verificationType])
  @@index([referenceId])
}

model DocumentAnalysis {
  id               String    @id @default(cuid())
  kycDocumentId    String    @unique
  extractedText    String?
  extractedData    Json?     // Structured data extracted from document
  documentType     Json?     // Document type details including country
  confidence       Float?    // Analysis confidence score
  isReadable       Boolean   @default(false)
  qualityScore     Float?    // Document quality score
  analysisProvider String    @default("DOJAH")
  createdAt        DateTime  @default(now())
  isValid          Boolean   @default(false)  // Added field
  validationStatus Json?     // Added field for detailed status
  textData         Json?     // Added field for extracted text data
  documentImages   Json?     // Added field for document images
  kycDocument      KYCDocument @relation(fields: [kycDocumentId], references: [id], onDelete: Cascade)
}

model AdminReview {
  id                String                @id @default(cuid())
  userId            String
  reviewerId        String
  documentId        String?               // Polymorphic relation to either KYCDocument or SelfieVerification IDs
  verificationType  AdminReviewType
  dojahVerificationId String?
  status            AdminReviewStatus     @default(PENDING)
  reviewNotes       String?
  rejectionReason   String?
  allowReupload     Boolean               @default(false)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  user              User                  @relation(fields: [userId], references: [id])
  reviewer          User                  @relation("AdminReviews", fields: [reviewerId], references: [id])
  dojahVerification DojahVerification?    @relation(fields: [dojahVerificationId], references: [id])
  
  @@index([userId])
  @@index([reviewerId])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum AccountStatus {
  PENDING
  ACTIVE
  SUSPENDED
  DEACTIVATED
}

enum AccountType {
  INDIVIDUAL
  PARTNERSHIP
  ENTERPRISE
  LLC
}

enum BusinessType {
  SOLE_PROPRIETORSHIP
  PARTNERSHIP
  LLC
  CORPORATION
}

enum DocumentType {
  ID_CARD
  PASSPORT
  UTILITY_BILL
  CERTIFICATE_OF_REGISTRATION
  FORM_OF_APPLICATION
  VALID_ID_OF_PARTNERS
  PROOF_OF_ADDRESS
  CERTIFICATE_OF_INCORPORATION
  MEMORANDUM_ARTICLES
  BOARD_RESOLUTION
  DIRECTORS_ID
  PASSPORT_PHOTOS
  UTILITY_RECEIPT
  BUSINESS_OWNER_ID
  BVN_SLIP
  NIN_SLIP
  DRIVERS_LICENSE
  VOTERS_CARD
}

enum VerificationStatusEnum {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  REQUIRES_REUPLOAD
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum DojahVerificationType {
  BVN_LOOKUP
  NIN_LOOKUP
  PASSPORT_LOOKUP
  DRIVERS_LICENSE_LOOKUP
  DOCUMENT_ANALYSIS
  SELFIE_PHOTO_ID_MATCH
  LIVENESS_CHECK
  AML_SCREENING
  FRAUD_IP_CHECK
  FRAUD_EMAIL_CHECK
  FRAUD_PHONE_CHECK
  FRAUD_CREDIT_CHECK
}

enum DojahStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
  INCOMPLETE_DATA
  RETRY_REQUIRED
}

enum AdminReviewType {
  DOCUMENT_VERIFICATION
  SELFIE_VERIFICATION
  IDENTITY_VERIFICATION
  FINAL_APPROVAL
}

enum AdminReviewStatus {
  PENDING
  APPROVED
  REJECTED
  REQUIRES_ADDITIONAL_INFO
}

model FraudDetection {
  id                String        @id @default(cuid())
  userId            String
  verificationType  FraudCheckType
  ipAddress         String?
  emailAddress      String?
  phoneNumber       String?
  requestData       Json?
  responseData      Json?
  riskScore         Int           @default(0)
  isFraudSuspected  Boolean       @default(false)
  detectionDetails  Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, verificationType])
  @@index([createdAt])
}

enum FraudCheckType {
  IP_CHECK
  EMAIL_CHECK
  PHONE_CHECK
  CREDIT_CHECK
  COMBINED_CHECK
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// CIBIL Credit Scoring Models
model CreditScore {
  id            String    @id @default(cuid())
  userId        String    @unique
  accountType   AccountType
  currentScore  Int       @default(300)
  previousScore Int?
  scoreChange   Int?
  lastUpdated   DateTime  @default(now())
  scoreHistory  CreditScoreHistory[]
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CreditScoreHistory {
  id            String    @id @default(cuid())
  creditScoreId String
  score         Int
  changeReason  String?
  factors       Json?
  createdAt     DateTime  @default(now())
  creditScore   CreditScore @relation(fields: [creditScoreId], references: [id], onDelete: Cascade)
  
  @@index([creditScoreId, createdAt])
}

model CreditBureauCheck {
  id            String    @id @default(cuid())
  userId        String
  bvn           String
  accountType   AccountType
  creditScore   Int?
  riskScore     Int?
  riskLevel     RiskLevel?
  responseData  Json?
  extractedData Json?
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@index([bvn])
}

model CreditFactor {
  id          String    @id @default(cuid())
  userId      String
  factorType  String
  factorValue Float
  factorWeight Float
  impact      String
  description String?
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, factorType])
}

model CreditAccount {
  id            String    @id @default(cuid())
  userId        String
  accountType   String
  institution   String
  accountNumber String?
  balance       Float?
  limit         Float?
  status        String
  openedDate    DateTime?
  closedDate    DateTime?
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, accountType])
}

model CreditEnquiry {
  id            String    @id @default(cuid())
  userId        String
  institution   String
  enquiryType   String
  enquiryDate   DateTime
  amount        Float?
  purpose       String?
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, enquiryDate])
}

model CreditAlert {
  id          String    @id @default(cuid())
  userId      String
  alertType   String
  message     String
  severity    String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
}

model KYCFormData {
  id                    String    @id @default(cuid())
  userId                String    @unique
  accountType           AccountType
  businessName          String?
  businessAddress       String?
  taxNumber             String?
  scumlNumber           String?
  bvn                   String?   // Add BVN field for credit score calculations
  
  // References
  ref1Name              String?
  ref1Address           String?
  ref1Phone             String?
  ref2Name              String?
  ref2Address           String?
  ref2Phone             String?
  
  // Extracted document data
  extractedData         Json?
  
  // Form metadata
  isSubmitted           Boolean   @default(false)
  submittedAt           DateTime?
  lastCheckedAt         DateTime?
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

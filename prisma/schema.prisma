generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  password           String?
  firstName          String
  lastName           String
  phone              String?
  address            String?
  dateOfBirth        DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  role               UserRole            @default(USER)
  accountStatus      AccountStatus       @default(PENDING)
  accountType        AccountType         @default(INDIVIDUAL)
  account            Account?
  auditLogs          AuditLog[]
  kycDocuments       KYCDocument[]
  notifications      Notification[]
  references         Reference[]
  selfieVerification SelfieVerification?
  verificationStatus VerificationStatus?
}

model Account {
  id              String        @id @default(cuid())
  userId          String        @unique
  businessName    String?
  businessType    BusinessType?
  businessAddress String?
  taxNumber       String?
  scumlNumber     String?
  occupation      String?
  sourceOfIncome  String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KYCDocument {
  id          String                 @id @default(cuid())
  userId      String
  type        DocumentType
  fileContent String?
  fileSize    Int
  mimeType    String
  fileName    String
  isChunked   Boolean                @default(false)
  uploadedAt  DateTime               @default(now())
  verified    Boolean                @default(false)
  verifiedAt  DateTime?
  verifiedBy  String?
  status      VerificationStatusEnum @default(PENDING)
  notes       String?
  FileChunk   FileChunk[]
  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SelfieVerification {
  id          String                 @id @default(cuid())
  userId      String                 @unique
  fileContent String?
  fileName    String
  fileSize    Int
  mimeType    String
  isChunked   Boolean                @default(false)
  capturedAt  DateTime               @default(now())
  verified    Boolean                @default(false)
  verifiedAt  DateTime?
  verifiedBy  String?
  status      VerificationStatusEnum @default(PENDING)
  notes       String?
  FileChunk   FileChunk[]
  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationStatus {
  id            String                 @id @default(cuid())
  userId        String                 @unique
  kycStatus     VerificationStatusEnum @default(PENDING)
  selfieStatus  VerificationStatusEnum @default(PENDING)
  overallStatus VerificationStatusEnum @default(PENDING)
  progress      Int                    @default(0)
  updatedAt     DateTime               @updatedAt
  reviewedBy    String?
  notes         String?
  user          User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reference {
  id           String    @id @default(cuid())
  userId       String
  name         String
  address      String
  phone        String
  email        String?
  relationship String?
  verified     Boolean   @default(false)
  verifiedAt   DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  link      String?
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  details    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  targetId   String?
  targetType String?
  user       User     @relation(fields: [userId], references: [id])
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?
}

model FileChunk {
  id                   String              @id @default(cuid())
  fileId               String
  chunkIndex           Int
  content              String
  kycDocumentId        String?
  selfieVerificationId String?
  kycDocument          KYCDocument?        @relation(fields: [kycDocumentId], references: [id], onDelete: Cascade)
  selfieVerification   SelfieVerification? @relation(fields: [selfieVerificationId], references: [id], onDelete: Cascade)

  @@unique([fileId, chunkIndex])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum AccountStatus {
  PENDING
  ACTIVE
  SUSPENDED
  DEACTIVATED
}

enum AccountType {
  INDIVIDUAL
  PARTNERSHIP
  ENTERPRISE
  LLC
}

enum BusinessType {
  SOLE_PROPRIETORSHIP
  PARTNERSHIP
  LLC
  CORPORATION
}

enum DocumentType {
  ID_CARD
  PASSPORT
  UTILITY_BILL
  CERTIFICATE_OF_REGISTRATION
  FORM_OF_APPLICATION
  VALID_ID_OF_PARTNERS
  PROOF_OF_ADDRESS
  CERTIFICATE_OF_INCORPORATION
  MEMORANDUM_ARTICLES
  BOARD_RESOLUTION
  DIRECTORS_ID
  PASSPORT_PHOTOS
  UTILITY_RECEIPT
  BUSINESS_OWNER_ID
}

enum VerificationStatusEnum {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}
